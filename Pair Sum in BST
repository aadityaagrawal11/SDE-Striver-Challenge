/**********************************************************

    Following is the Binary Tree Node structure:

    template <typename T>
    class BinaryTreeNode {
        public: 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };
***********************************************************/
void inorder(BinaryTreeNode<int>* root,vector<int> &output){
    if(root==NULL){
        return;
    }
    inorder(root->left,output);
    output.push_back(root->data);
    inorder(root->right,output);
}
bool pairSumBst(BinaryTreeNode<int> *root, int k)
{
    // Write your code here
    if(root==NULL){
        return false;
    }
    vector<int> output;
    inorder(root,output);
    int start=0;
    int end=output.size()-1;
    while(start<=end){
        if(output[start]+output[end]==k){
            return true;
        }
        else if(output[start]+output[end]>k){
            end--;
        }
        else{
            start++;
        }
    }
    return false;
}
                          ***********************************************************
                          
 
